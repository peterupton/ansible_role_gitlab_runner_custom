# managed by Ansible
# configuration for {{ item.name }}
# see: https://ecp-ci.gitlab.io/docs/admin/jacamar/configuration.html
[general]
# A required setting that specifies which of the supported executors CI jobs will utilize.
executor = "{{ item.custom.executor }}"
# A required setting where all files/directories for a job are stored. Strict ownership (user:user) and permissions (0700) are enforced on top level directories.
data_dir = "{{ item.custom.data_dir }}"
{% if item.custom.retain_logs is defined %}
# Keep all files generated by the executor and/or scheduling mechanisms (default: false, removed upon job completion).
retain_logs = {{ item.custom.retain_logs | string | map('lower') | join }}
{% endif %}
{% if item.custom.custom_build_dir is defined %}
# Observe the directory specified by a user’s CUSTOM_CI_BUILDS_DIR variable, this will replace any builds directory derived from the data_dir. Jacamar will ensure unique paths and appropriate permissions (700). Does not function in conjunction with root_dir_creation.
custom_build_dir = {{ item.custom.custom_build_dir | string | map('lower') | join }}
{% endif %}
# Administrator defined string, (currently) only appears in Jacamar’s system logging capabilities to help distinguish from other instances.
name = "{{ item.name }}"
{% if item.custom.kill_timeout is defined %}
# Maximum timeout (duration string default: 120s) the Jacamar-Auth application will wait before sending a SIGKILL to the underlying Jacamar process if a SIGTERM is captured from a custom executor termination.
kill_timeout = "{{ item.custom.kill_timeout }}"
{% endif %}
{% if item.custom.shell_path is defined %}
# Shell path to be used when constructing Bash shell for job script execution, when not set will resolve based upon PATH.
shell_path = {{ item.custom.shell_path }}
{% endif %}
{% if item.custom.job_message is defined %}
# Custom message that will be conveyed at the start of every prepare_exec stage to the user.
job_message = {{ item.custom.job_message }}
{% endif %}
{% if item.custom.gitlab_server is defined %}
# Trusted URL for GitLab server used in all web interactions, takes priority over any values identified in the job response.
gitlab_server = "{{ item.custom.gitlab_server }}"
{% endif %}
{% if item.custom.tls_ca_file is defined %}
# File containing the required certificates for HTTPS actions.
tls-ca-file = {{ item.custom.tls_ca_file }}
{% endif %}
{% if item.custom.unrestricted_cmd_line is defined %}
# Allow for unfettered usages of tokens via the command line by all runner generated job scripts.
unrestricted_cmd_line = {{ item.custom.unrestricted_cmd_line }}
{% endif %}
{% if item.custom.static_builds_dir is defined %}
# Create a static folder (<data_dir>/user/statis/<job_id>) that will be unique for every job and only removed based upon the static_min_days configuration.
static_builds_dir = {{ item.custom.static_builds_dir }}
{% endif %}
{% if item.custom.static_min_days is defined %}
# Minimum number of days any static directory can remain (default: 7 with 0 indicating no clenaup required).This will only be enforced during job cleanup and may lead to longer than average job durations.
static_min_days = {{ item.custom.static_min_days }}
{% endif %}
{% if item.custom.group_permissions is defined %}
# Set base permissions on Jacamar generated data directories to allow read and execute access for groups (ie, 0750 permission).
group_permissions = {{ item.custom.group_permissions }}
{% endif %}
{% if item.custom.jwt_env_variable is defined %}
# Environment variable to be checked for an id_token (default: CI_JOB_JWT)
jwt_env_variable = {{ item.custom.jwt_env_variable }}
{% endif %}
{% if item.custom.set_stack_size is defined %}
# Overrides behavior found in RHEL 8 that reverts the stack size to 8m when capabilities are used. This will cause the user’s environment to set the ulimit to match the available hard limit, normally configured through the runner’s systemd file.
set_stack_size = {{ item.custom.set_stack_size }}
{% endif %}
{% if item.custom.user_bash_env is defined %}
# Can be used to define key=value pairs that will be injected into the user’s shell responsible for jobs script and monitoring command execution.
user_bash_env = {{ item.custom.user_bash_env }}
{% endif %}
{% if item.custom.limit_build_dir is defined %}
# Enforces a limited structure on the builds_dir by creating a user driven process to automatically claim concurrent directories through file locking.
limit_build_dir = {{ item.custom.limit_build_dir | string | map('lower') | join }}
{% endif %}
{% if item.custom.max_build_dir is defined %}
# Indicates how many concurrent build directories can be left on the system (default: 0, only limited by cumulative runner concurrency).
max_build_dir = {{ item.custom.max_build_dir }}
{% endif %}
{% if item.custom.uncap_build_dir_cleanup is defined %}
# By default cleanup is limited to a single builds_dir in every job. This is to limit a CI job becoming “stuck” during clean_exec, during which we lack the ability to directly notify the user of any cleanup actions.
uncap_build_dir_cleanup = {{ item.custom.uncap_build_dir_cleanup | string | map('lower') | join }}
{% endif %}
{% if item.custom.file_lock_debug is defined %}
# Create a log file that outlines all actions of the jacamar lock process occurring in userspace. This should only be used for troubleshooting potential errors with the process of generating/claiming file locks as there is no automated cleanup on these files.
file_lock_debug = {{ item.custom.file_lock_debug | string | map('lower') | join }}
{% endif %}
{% if item.custom.user_enabled_limit is defined %}
# Only a user (via the JACAMAR_LIMITED_DIR: 1 variable) can utilize this feature. The ideal workflow would have this enabled in conjunction with the primary limit_build_dir to allow select users to test this feature at scale with existing infrastructure.
user_enabled_limit = {{ item.custom.user_enabled_limit | string | map('lower') | join }}
{% endif %}
{% if item.custom.auth_downscope is defined %}
# Indicates that jobs should be blocked during configuration if a pam_nologin <https://man7.org/linux/man-pages/man8/pam_nologin.8.html>_ file (/etc/nologin or /var/run/nologin) is encountered. The contents of this file will be presented to the user in their job log.
[auth]
# Target downscoping mechanisms for execution of all CI scripts and generated commands through the auth mechanisms. When using jacamar-auth this is required.
downscope = "{{ item.custom.auth_downscope }}"
{% if item.custom.auth_jacamar_path is defined %}
# The full path to the Jacamar application, used in constructing the command for job execution. This can be used if it has been installed outside the user’s PATH.
jacamar_path = "{{ item.custom.auth_jacamar_path }}"
{% endif %}
{% if item.custom.auth_max_env_chars is defined %}
# The maximum number of characters that can be defined per environment variable (default: 10000).
max_env_chars = {{ item.custom.auth_max_env_chars }}
{% endif %}
{% if item.custom.auth_lists_pre_validation is defined %}
# Boolean indicates if the allow/block list rules should be observed prior to the execution of the RunAS validate script.
lists_pre_validation = {{ item.custom.auth_lists_pre_validation | string | map('lower') | join }}
{% endif %}
{% if item.custom.auth_root_dir_creation is defined %}
# Indicate via boolean if the privileged Jacamar-Auth user should create the target CI user’s base data_dir (e.g., /data_dir/username) and assign permission via chown.
root_dir_creation = {{ item.custom.auth_root_dir_creation | string | map('lower') | join }}
{% endif %}
{% if item.custom.auth_user_allowlist is defined %}
# An authoritative list of users who can execute CI jobs.
user_allowlist = {{ item.custom.auth_user_allowlist }}
{% endif %}
{% if item.custom.auth_user_blocklist is defined %}
# A list of usernames that are not allowed to run CI jobs. More authoritative than group lists, but can be overridden by UserAllowlist.
user_blocklist = {{ item.custom.auth_user_blocklist }}
{% endif %}
{% if item.custom.auth_groups_allowlist is defined %}
# A list of groups that are allowed to run CI jobs. Least authoritative.
groups_allowlist = {{ item.custom.groups_allowlist }}
{% endif %}
{% if item.custom.auth_groups_blocklist is defined %}
# A list of groups that are not allowed to run CI jobs.
groups_blocklist = {{ item.custom.groups_blocklist }}
{% endif %}
{% if item.custom.auth_shell_allowlist is defined %}
# If defined, an authoritative list of acceptable shells that for CI users as they are found in the user database.
shell_allowlist = {{ item.custom.auth_shell_allowlist }}
{% endif %}
{% if item.custom.auth_pipeline_source_allowlist is defined %}
# If defined, an authoritative list of acceptable CI_PIPELINE_SOURCES that can result in local jobs. Value obtained through verified GitLab JWT.
pipeline_source_allowlist = {{ item.custom.auth_pipeline_source_allowlist }}
{% endif %}
{% if item.custom.auth_jwt_exp_delay is defined %}
# Configurable duration string delay allowed in a JWT’s expiration in select cases to allow for automated cleanup actions (default 15m and maximum 1hr).
jwt_exp_delay = "{{ item.custom.auth_jwt_exp_delay }}"
{% endif %}
{% if item.custom.auth_jwt_required_aud is defined %}
# Required audience (aud) when validating a JWT.
jwt_required_aud = {{ item.custom.auth_jwt_required_aud }}
{% endif %}
{% if item.custom.auth_allow_bot_accounts is defined %}
# GitLab managed project bos accounts (i.e., project_{number}_bot) are disallowed by default.
allow_bot_accounts = {{ item.custom.auth_allow_bot_accounts | string | map('lower') | join }}
{% endif %}
{% if item.custom.auth_no_new_privs is defined %}
# Enforces PR_SET_NO_NEW_PRIVS, to limit the sub-process from gaining additional privileges. Please note that this setting is redundant if seccomp is being used.
no_new_privs = {{ item.custom.auth_no_new_privs | string | map('lower') | join }}
{% endif %}
{% if item.custom.auth_run_stage_allowlist is defined %}
# List of Run stages that are allowed, all other skipped with a warning to the user.
run_stage_allowlist = {{ item.custom.auth_run_stage_allowlist }}
{% endif %}
{% if item.custom.auth_enforce_nologin is defined %}
# Indicates that jobs should be blocked during configuration if a pam_nologin <https://man7.org/linux/man-pages/man8/pam_nologin.8.html>_ file (/etc/nologin or /var/run/nologin) is encountered. The contents of this file will be presented to the user in their job log.
enforce_nologin = {{ item.custom.auth_enforce_nologin | string | map('lower') | join }}
{% endif %}
{% if item.custom.auth_runas_validation_script is defined %}
[auth.runas]
# Configuration of the RunAs portion of the authorization flow can offer administrative control over a transition between the CI user and a local account not known by GitLab. For additional details and workflow consideration see the RunAs authorization.
# Specify the path to a script where the local user and target service account can be validated. When using RunAs a script is required.
validation_script = "{{ item.custom.auth_runas_validation_script }}"
{% if item.custom.auth_runas_user_variable is defined %}
# Indicates the name of the CI variable a user can define to indicate their target service account.
user_variable = "{{ item.custom.auth_runas_user_variable }}
{% endif %}
{% if item.custom.auth_runas_sha256 is defined %}
# Checksum of script, if provided will be verified shortly before execution.
sha256 = "{{ item.custom.auth_runas_sha256 }}"
{% endif %}
{% if item.custom.auth_runas_validation_env is defined %}
# Manages a list of “key=value” strings that dictate additional context to the validation script. These will take lowest priority so avoid using the key for any existing RunAs or system environment variables.
validation_env = {{ auth_runas_validation_env }}
{% endif %}
{% endif %}
[auth.logging]
# Logging represents configuration of how the jacamar-auth application (ONLY) will log relevant job level information. This occurs in addition to any logging preformed by the GitLab runner and assumes that the user account responsible for launching jacamar-auth is provided with the necessary access to the local system log daemon or target file.
{% if item.custom.auth_logging_enabled is defined %}
# If the system logging for jacamar-auth should be used for all CI jobs that are processed.
enabled = {{ item.custom.auth_logging_enabled | string | map('lower') | join }}
{% endif %}
{% if item.custom.auth_logging_location is defined %}
# Identifies where logs will be saved, this can be a distinct file or syslog (default). In the case of syslog, a connection to the log daemon will be established, targeting the local syslog server if related values are not specified.
location = "{{ item.custom.auth_logging_location }}"
{% endif %}
{% if item.custom.auth_logging_level is defined %}
# Denotes the logging level (error, warn, info, or debug) of messages saved. Defaults to debug.
level = "{{ item.custom.auth_logging_level }}"
{% endif %}
{% if item.custom.auth_logging_network is defined %}
# Used for dialing remote log daemon connections only (e.g., tcp).
network = "{{ item.custom.auth_logging_network }}"
{% endif %}
{% if item.custom.auth_logging_address is defined %}
# Used for dialing remote log daemon connections only (e.g., localhost:1234).
address = "{{ item.custom.auth_logging_address }}"
{% endif %}
[auth.seccomp]
# The jacamar-auth application by default supports system call filtering through the libseccomp API. This added functionality can be found in versions 0.5.0+ of Jacamar CI. There are two distinct mechanisms by which specific syscalls are identified for filtering; administratively defined configurations and Default Filters established based upon supported downscoping mechanisms.
{% if item.custom.auth_seccomp_disabled is defined %}
# Signal if system call filtering via libseccomp should be disabled, this includes all system defined defaults as well as administrative configurations. We advise only disabling if troubleshooting or under specific circumstances where security requirements are not as high.
disabled = {{ item.custom.auth_seccomp_disabled | string | map('lower') | join }}
{% endif %}
{% if item.custom.auth_seccomp_block_calls is defined %}
# A list of blocked system calls that the jacamar-auth application will declare. Incorrectly defined calls will result in an error message being produced immediately upon job creation and should be troubleshooted prior to deployment of any configuration changes.
block_calls = {{ item.custom.auth_seccomp_block_calls }}
{% endif %}
{% if item.custom.auth_seccomp_block_all is defined %}
# Globally blocks all system calls from being used, this requires reliance on a manually defined list of allow_calls for functionality.
block_all = {{ item.custom.auth_seccomp_block_all | string | map('lower') | join }}
{% endif %}
{% if item.custom.auth_seccomp_allow_calls is defined %}
# List of system calls that will be allowed, this takes precedence over any manually (block_calls) or system defined blocked calls.
allow_calls = {{ item.custom.auth_seccomp_allow_calls }}
{% endif %}
{% if item.custom.auth_seccomp_log_allowed_actions is defined %}
# Sets the default action for allowed system calls to log (audit) while still allowing their execution. This option creates a substantial number of logs and is only suited for dev/test environments.
log_allowed_actions = {{ item.custom.auth_seccomp_log_allowed_actions | string | map('lower') | join }}
{% endif %}
{% if item.custom.auth_seccomp_disable_no_new_privs is defined %}
# Disables or prevents the application of PR_SET_NO_NEW_PRIVS based upon the usage of seccomp filters. This only applies when seccomp is enabled.
disable_no_new_privs = {{ item.custom.auth_seccomp_disable_no_new_privs | string | map('lower') | join }}
{% endif %}
{% if item.custom.auth_seccomp_error_num_block_actions is defined %}
# Modifies the desired block actions and will return an error code rather than terminating the associated thread.
error_num_block_actions = {{ item.custom.auth_seccomp_error_num_block_actions }}
{% endif %}
{% if item.custom.auth_seccomp_validation_plugin is defined %}
# Path to a Go plugin where the filter can be modified. Setting this value implies that plugin support should be enabled
validation_plugin = {{ item.custom.auth_seccomp_validation_plugin }}
{% endif %}
{% if item.custom.auth_seccomp_limit_setuid is defined %}
# Block any setuid or setgid call to the non-authorized UID/GID.
limit_setuid = {{ item.custom.auth_seccomp_limit_setuid | string | map('lower') | join }}
{% endif %}
{% if item.custom.auth_seccomp_tty_rules is defined %}
# Block ioctl in conjunction with TIOCSTI.
tty_rules = {{ item.custom.auth_seccomp_tty_rules | string | map('lower') | join }}
{% endif %}
[batch]
{% if item.custom.batch_arguments_variable is defined %}
# An array of potential CI variables for user provided arguments in the job submission that are checked in order (default SCHEDULER_PARAMETERS is always present as a catch all).
arguments_variable = {{ item.custom.batch_arguments_variable }}
{% endif %}
{% if item.custom.batch_command_delay is defined %}
# Meter interactions with schedulers via a duration string (default: 30s). We recommend leaving this at it’s default value unless specific concerns with your environment arise.
command_delay = "{{ item.custom.batch_command_delay }}"
{% endif %}
{% if item.custom.batch_nfs_timeout is defined %}
# Largest possible delay to expect from NFS servers as a duration string (default: 30s). Due to the batch executors reliance on compute resources coupled with a network file system, providing too low a value can lead to job results not being correctly conveyed to the user.
nfs_timeout = "{{ item.custom.batch_nfs_timeout }}"
{% endif %}
{% if item.custom.batch_scheduler_bin is defined %}
# Path to be observed as a prefix for all scheduler commands generated. Useful when default scheduler application on a user’s PATH can be incorrect.
scheduler_bin = "{{ item.custom.batch_scheduler_bin }}"
{% endif %}
{% if item.custom.batch_env_vars is defined %}
# Array of key=value strings that are used when building job submission command (e.g., qsub).
env_vars = {{ item.custom.batch_env_vars }}
{% endif %}
{% if item.custom.batch_allow_illegal_args is defined %}
# Do not cause job failures when a conflicting parameters
allow_illegal_args = {{ item.custom.batch_allow_illegal_args | string | map('lower') | join }}
{% endif %}
{% if item.custom.batch_skip_cobalt_log is defined %}
# Identify that the job status found in the CobaltLog should be skipped in favor of an echo in the output file (Ideally for test/debug purposes only).
skip_cobalt_log = {{ item.custom.batch_skip_cobalt_log }}
{% endif %}
{% if item.custom.batch_lsf_job_cancellation is defined %}
# Enables the use of bkill to signal a running job it’s time to stop based upon a runner generated SIGTERM.
lsf_job_cancellation = {{ item.custom.batch_lsf_job_cancellation | string | map('lower') | join }}
{% endif %}
{% if item.custom.batch_default_args is defined %}
# List of arguments that will be injected into the job submission commands.
default_args = {{ item.custom.batch_default_args }}
{% endif %}
{% if item.custom.batch_disable_name_prefix is defined %}
Prevents a user defined name prefix (via SCHEDULER_JOB_PREFIX).
disable_name_prefix = {{ item.custom.batch_disable_name_prefix }}
{% endif %}
{% endif %}
